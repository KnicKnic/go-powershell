// Code generated by 'go generate'; DO NOT EDIT.

package powershell

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modpsh_host = windows.NewLazyDLL("psh_host.dll")
	modntdll    = windows.NewLazySystemDLL("ntdll.dll")

	procnativePowerShell_CreatePowerShell       = modpsh_host.NewProc("NativePowerShell_CreatePowerShell")
	procnativePowerShell_CreatePowerShellNested = modpsh_host.NewProc("NativePowerShell_CreatePowerShellNested")
	procnativePowerShell_DeletePowershell       = modpsh_host.NewProc("NativePowerShell_DeletePowershell")
	procnativePowerShell_CreateRunspace         = modpsh_host.NewProc("NativePowerShell_CreateRunspace")
	procnativePowerShell_CreateRemoteRunspace   = modpsh_host.NewProc("NativePowerShell_CreateRemoteRunspace")
	procnativePowerShell_DeleteRunspace         = modpsh_host.NewProc("NativePowerShell_DeleteRunspace")
	procnativePowerShell_AddCommand             = modpsh_host.NewProc("NativePowerShell_AddCommand")
	procnativePowerShell_AddCommandSpecifyScope = modpsh_host.NewProc("NativePowerShell_AddCommandSpecifyScope")
	procnativePowerShell_AddParameterString     = modpsh_host.NewProc("NativePowerShell_AddParameterString")
	procnativePowerShell_AddParameterObject     = modpsh_host.NewProc("NativePowerShell_AddParameterObject")
	procnativePowerShell_AddArgument            = modpsh_host.NewProc("NativePowerShell_AddArgument")
	procnativePowerShell_AddPSObjectArgument    = modpsh_host.NewProc("NativePowerShell_AddPSObjectArgument")
	procnativePowerShell_AddPSObjectArguments   = modpsh_host.NewProc("NativePowerShell_AddPSObjectArguments")
	procnativePowerShell_InvokeCommand          = modpsh_host.NewProc("NativePowerShell_InvokeCommand")
	procnativePowerShell_AddScript              = modpsh_host.NewProc("NativePowerShell_AddScript")
	procnativePowerShell_AddScriptSpecifyScope  = modpsh_host.NewProc("NativePowerShell_AddScriptSpecifyScope")
	procnativePowerShell_ClosePowerShellObject  = modpsh_host.NewProc("NativePowerShell_ClosePowerShellObject")
	procnativePowerShell_GetPSObjectType        = modpsh_host.NewProc("NativePowerShell_GetPSObjectType")
	procnativePowerShell_GetPSObjectToString    = modpsh_host.NewProc("NativePowerShell_GetPSObjectToString")
	procnativePowerShell_IsPSObjectNullptr      = modpsh_host.NewProc("NativePowerShell_IsPSObjectNullptr")
	procnativePowerShell_AddPSObjectHandle      = modpsh_host.NewProc("NativePowerShell_AddPSObjectHandle")
	procnativePowerShell_DefaultAlloc           = modpsh_host.NewProc("NativePowerShell_DefaultAlloc")
	procnativePowerShell_DefaultFree            = modpsh_host.NewProc("NativePowerShell_DefaultFree")
	procmemcpy                                  = modntdll.NewProc("memcpy")
)

func nativePowerShell_CreatePowerShell(handle nativePowerShell_RunspaceHandle) (status nativePowerShell_PowerShellHandle) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_CreatePowerShell.Addr(), 1, uintptr(handle), 0, 0)
	status = nativePowerShell_PowerShellHandle(r0)
	return
}

func nativePowerShell_CreatePowerShellNested(handle nativePowerShell_PowerShellHandle) (status nativePowerShell_PowerShellHandle) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_CreatePowerShellNested.Addr(), 1, uintptr(handle), 0, 0)
	status = nativePowerShell_PowerShellHandle(r0)
	return
}

func nativePowerShell_DeletePowershell(handle nativePowerShell_PowerShellHandle) {
	syscall.Syscall(procnativePowerShell_DeletePowershell.Addr(), 1, uintptr(handle), 0, 0)
	return
}

func nativePowerShell_CreateRunspace(context uintptr, command uintptr, holder uintptr) (status nativePowerShell_RunspaceHandle) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_CreateRunspace.Addr(), 3, uintptr(context), uintptr(command), uintptr(holder))
	status = nativePowerShell_RunspaceHandle(r0)
	return
}

func nativePowerShell_CreateRemoteRunspace(context uintptr, holder uintptr, computerName *uint16, username *uint16, password *uint16) (status nativePowerShell_RunspaceHandle) {
	r0, _, _ := syscall.Syscall6(procnativePowerShell_CreateRemoteRunspace.Addr(), 5, uintptr(context), uintptr(holder), uintptr(unsafe.Pointer(computerName)), uintptr(unsafe.Pointer(username)), uintptr(unsafe.Pointer(password)), 0)
	status = nativePowerShell_RunspaceHandle(r0)
	return
}

func nativePowerShell_DeleteRunspace(handle nativePowerShell_RunspaceHandle) {
	syscall.Syscall(procnativePowerShell_DeleteRunspace.Addr(), 1, uintptr(handle), 0, 0)
	return
}

func nativePowerShell_AddCommand(handle nativePowerShell_PowerShellHandle, command *uint16) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddCommand.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(command)), 0)
	status = uint(r0)
	return
}

func nativePowerShell_AddCommandSpecifyScope(handle nativePowerShell_PowerShellHandle, command *uint16, useLocalScope byte) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddCommandSpecifyScope.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(command)), uintptr(useLocalScope))
	status = uint(r0)
	return
}

func nativePowerShell_AddParameterString(handle nativePowerShell_PowerShellHandle, name *uint16, value *uint16) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddParameterString.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(value)))
	status = uint(r0)
	return
}

func nativePowerShell_AddParameterObject(handle nativePowerShell_PowerShellHandle, name *uint16, object nativePowerShell_PowerShellObject) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddParameterObject.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(name)), uintptr(object))
	status = uint(r0)
	return
}

func nativePowerShell_AddArgument(handle nativePowerShell_PowerShellHandle, argument *uint16) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddArgument.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(argument)), 0)
	status = uint(r0)
	return
}

func nativePowerShell_AddPSObjectArgument(handle nativePowerShell_PowerShellHandle, object nativePowerShell_PowerShellObject) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddPSObjectArgument.Addr(), 2, uintptr(handle), uintptr(object), 0)
	status = uint(r0)
	return
}

func nativePowerShell_AddPSObjectArguments(handle nativePowerShell_PowerShellHandle, objects *nativePowerShell_PowerShellObject, count uint) (status uint) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddPSObjectArguments.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(objects)), uintptr(count))
	status = uint(r0)
	return
}

func nativePowerShell_InvokeCommand(handle nativePowerShell_PowerShellHandle, objects *uintptr, objectCount *uint) (status nativePowerShell_PowerShellObject) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_InvokeCommand.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(objects)), uintptr(unsafe.Pointer(objectCount)))
	status = nativePowerShell_PowerShellObject(r0)
	return
}

func nativePowerShell_AddScript(handle nativePowerShell_PowerShellHandle, path *uint16) (status int) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddScript.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(path)), 0)
	status = int(r0)
	return
}

func nativePowerShell_AddScriptSpecifyScope(handle nativePowerShell_PowerShellHandle, path *uint16, useLocalScope byte) (status int) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddScriptSpecifyScope.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(path)), uintptr(useLocalScope))
	status = int(r0)
	return
}

func nativePowerShell_ClosePowerShellObject(psobject nativePowerShell_PowerShellObject) {
	syscall.Syscall(procnativePowerShell_ClosePowerShellObject.Addr(), 1, uintptr(psobject), 0, 0)
	return
}

func nativePowerShell_GetPSObjectType(handle nativePowerShell_PowerShellObject) (status uintptr) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_GetPSObjectType.Addr(), 1, uintptr(handle), 0, 0)
	status = uintptr(r0)
	return
}

func nativePowerShell_GetPSObjectToString(handle nativePowerShell_PowerShellObject) (status uintptr) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_GetPSObjectToString.Addr(), 1, uintptr(handle), 0, 0)
	status = uintptr(r0)
	return
}

func nativePowerShell_IsPSObjectNullptr(handle nativePowerShell_PowerShellObject) (status byte) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_IsPSObjectNullptr.Addr(), 1, uintptr(handle), 0, 0)
	status = byte(r0)
	return
}

func nativePowerShell_AddPSObjectHandle(handle nativePowerShell_PowerShellObject) (status nativePowerShell_PowerShellObject) {
	r0, _, _ := syscall.Syscall(procnativePowerShell_AddPSObjectHandle.Addr(), 1, uintptr(handle), 0, 0)
	status = nativePowerShell_PowerShellObject(r0)
	return
}

func nativePowerShell_DefaultAlloc(size uint64) (status uintptr, err error) {
	r0, _, err := syscall.Syscall(procnativePowerShell_DefaultAlloc.Addr(), 1, uintptr(size), 0, 0)
	status = uintptr(r0)
	if status != uintptr(0) {
		err = nil
	}
	return
}

func nativePowerShell_DefaultFree(address uintptr) {
	syscall.Syscall(procnativePowerShell_DefaultFree.Addr(), 1, uintptr(address), 0, 0)
	return
}

func memcpy(dest uintptr, src uintptr, size uint64) (ptr uintptr) {
	r0, _, _ := syscall.Syscall(procmemcpy.Addr(), 3, dest, src, uintptr(size))
	ptr = uintptr(r0)
	return
}

func memcpyLogStringHolder(dest uintptr, src nativePowerShell_LogString_Holder) (ptr uintptr) {

	r0, _, _ := syscall.Syscall(procmemcpy.Addr(), 3, dest, uintptr(unsafe.Pointer(&src)), uintptr(unsafe.Sizeof(src)))
	ptr = uintptr(r0)
	return
}
func memcpyJsonReturnValues(dest uintptr, src nativePowerShell_JsonReturnValues) (ptr uintptr) {

	r0, _, _ := syscall.Syscall(procmemcpy.Addr(), 3, dest, uintptr(unsafe.Pointer(&src)), uintptr(unsafe.Sizeof(src)))
	ptr = uintptr(r0)
	return
}

func memcpyGenericPowerShellObject(dest uintptr, src *nativePowerShell_GenericPowerShellObject, size uint64) (ptr uintptr) {

	r0, _, _ := syscall.Syscall(procmemcpy.Addr(), 3, dest, uintptr(unsafe.Pointer(src)), uintptr(size))
	ptr = uintptr(r0)
	return
}

func memcpyStr(dest uintptr, str string) (ptr uintptr) {
	cs, _ := windows.UTF16PtrFromString(str)
	size := 2 * uint64((len(str) + 1))

	r0, _, _ := syscall.Syscall(procmemcpy.Addr(), 3, dest, uintptr(unsafe.Pointer(cs)), uintptr(size))
	ptr = uintptr(r0)
	return
}

func cstrToStr(cstr uintptr) string {

	count := wsclen(cstr) + 1
	arr := make([]uint16, count)

	_, _, _ = syscall.Syscall(procmemcpy.Addr(), 3, uintptr(unsafe.Pointer(&arr[0])), cstr, uintptr(count*2))

	s := windows.UTF16ToString(arr)
	return s
}
